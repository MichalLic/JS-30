{"version":3,"sources":["script.js"],"names":["inventors","first","last","year","passed","people","fiveteen","filter","inventor","console","table","investorsNames","map","investor","log","ordered","sort","a","b","totalYears","reduce","total","oldest","firstPerson","lastPerson","family","lastOne","nextOne","split","data","transportation","obj","item"],"mappings":"AAAA,KAAAA,aACAC,MAAA,SAAAC,KAAA,WAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,QAAAC,KAAA,SAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,UAAAC,KAAA,UAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,QAAAC,KAAA,QAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,WAAAC,KAAA,SAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,WAAAC,KAAA,aAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,MAAAC,KAAA,SAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,YAAAC,KAAA,WAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,MAAAC,KAAA,WAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,WAAAC,KAAA,QAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,OAAAC,KAAA,UAAAC,KAAA,KAAAC,OAAA,OACAH,MAAA,QAAAC,KAAA,cAAAC,KAAA,KAAAC,OAAA,OAEAC,QAAA,cAAA,eAAA,kBAAA,gBAAA,iBAAA,oBAAA,kBAAA,kBAAA,eAAA,mBAAA,kBAAA,oBAAA,mBAAA,aAAA,sBAAA,gBAAA,cAAA,iBAAA,cAAA,kBAAA,iBAAA,gBAAA,iBAAA,cAAA,mBAAA,cAAA,eAAA,iBAAA,eAAA,iBAAA,aAAA,gBAAA,kBAAA,cAAA,iBAAA,gBAAA,qBAAA,aAAA,gBAAA,cAAA,kBAIAC,SAAAN,UAAAO,OAAA,SAAAC,GACA,GAAAA,EAAAL,MAAA,MAAAK,EAAAL,KAAA,KACA,OAAA,GAGAM,SAAAC,MAAAJ,SAKA,MAAAK,gBAAAX,UAAAY,IAAA,SAAAC,GACA,MAAAA,GAAAZ,MAAA,IAAAY,EAAAX,MAEAO,SAAAK,IAAAH,eAKA,MAAAI,SAAAf,UAAAgB,KAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAd,KAAAe,EAAAf,KAAA,GAAA,GAEAM,SAAAC,MAAAK,QAKA,MAAAI,YAAAnB,UAAAoB,OAAA,SAAAC,EAAAR,GAGA,MAFAJ,SAAAK,IAAAO,GACAZ,QAAAK,IAAAD,GACAQ,GAAAR,EAAAT,OAAAS,EAAAV,OACA,EACAM,SAAAK,IAAA,0CAAAK,WAAA,kCAIA,MAAAG,QAAAtB,UAAAgB,KAAA,SAAAO,EAAAC,GAGA,MAFAD,GAAAnB,OAAAmB,EAAApB,KACAqB,EAAApB,OAAAoB,EAAArB,MACA,EAAA,GAEAM,SAAAC,MAAAY,OAKA,MAAAG,QAAApB,OAAAW,KAAA,SAAAU,EAAAC,GAGA,MAFAD,GAAAE,MAAA,MACAD,EAAAC,MAAA,MACA,GAAA,GAEAnB,SAAAK,IAAAW,OAKA,MAAAI,OAAA,MAAA,MAAA,QAAA,QAAA,OAAA,OAAA,MAAA,MAAA,OAAA,OAAA,MAAA,MAAA,MAAA,QACApB,SAAAK,IAAAe,KAEA,IAAAC,gBAAAD,KAAAT,OAAA,SAAAW,EAAAC,GAKA,MAJAD,GAAAC,KACAD,EAAAC,GAAA,GAEAD,EAAAC,KACAD,MAEAtB,SAAAK,IAAAgB","file":"app.js","sourcesContent":["const inventors = [\r\n    {first: 'Albert', last: 'Einstein', year: 1879, passed: 1955},\r\n    {first: 'Isaac', last: 'Newton', year: 1643, passed: 1727},\r\n    {first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642},\r\n    {first: 'Marie', last: 'Curie', year: 1867, passed: 1934},\r\n    {first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630},\r\n    {first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543},\r\n    {first: 'Max', last: 'Planck', year: 1858, passed: 1947},\r\n    {first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979},\r\n    {first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852},\r\n    {first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905},\r\n    {first: 'Lise', last: 'Meitner', year: 1878, passed: 1968},\r\n    {first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909}\r\n];\r\nconst people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];\r\n\r\n// Array.prototype.filter()\r\n// 1. Filter the list of inventors for those who were born in the 1500's\r\nconst fiveteen = inventors.filter(function (inventor) {\r\n    if (inventor.year >= 1500 && inventor.year < 1600) {\r\n        return true;\r\n    }\r\n});\r\nconsole.table(fiveteen);\r\n\r\n\r\n// Array.prototype.map()\r\n// 2. Give us an array of the inventors' first and last names\r\nconst investorsNames = inventors.map(function (investor) {\r\n    return investor.first + ' ' + investor.last\r\n});\r\nconsole.log(investorsNames);\r\n\r\n\r\n// Array.prototype.sort()\r\n// 3. Sort the inventors by birthdate, oldest to youngest\r\nconst ordered = inventors.sort(function (a, b) {\r\n    return a.year > b.year ? 1 : -1;\r\n});\r\nconsole.table(ordered);\r\n\r\n\r\n// Array.prototype.reduce()\r\n// 4. How many years did all the inventors live?\r\nconst totalYears = inventors.reduce(function (total, investor) {\r\n    console.log(total);\r\n    console.log(investor);\r\n    return total + (investor.passed - investor.year)\r\n}, 0);\r\nconsole.log('Totals years of investors lives are: ' + '%c' + totalYears, 'font-size: 25px; color: orange;');\r\n\r\n\r\n// 5. Sort the inventors by years lived\r\nconst oldest = inventors.sort(function (firstPerson, lastPerson) {\r\n    const a = firstPerson.passed - firstPerson.year;\r\n    const b = lastPerson.passed - lastPerson.year;\r\n    return a > b ? -1 : 1;\r\n});\r\nconsole.table(oldest);\r\n\r\n\r\n// 6. sort Exercise\r\n// Sort the people alphabetically by last name\r\nconst family = people.sort(function (lastOne, nextOne) {\r\n    const a = lastOne.split(', ');\r\n    const b = nextOne.split(', ');\r\n    return a > b ? 1 : -1;\r\n});\r\nconsole.log(family);\r\n\r\n\r\n// 7. Reduce Exercise\r\n// Sum up the instances of each of these\r\nconst data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck'];\r\nconsole.log(data);\r\n\r\nvar transportation = data.reduce(function (obj, item) {\r\n    if (!obj[item]) {\r\n        obj[item] = 0;\r\n    }\r\n    obj[item]++;\r\n    return obj;\r\n}, {});\r\nconsole.log(transportation);"]}